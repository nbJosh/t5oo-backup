[gcode_macro _global_var]
variable_cancel_park:{'x': 10, 'y': 490, 'z': 10, 'e': 1}
variable_pause_park:{'x': 10, 'y': 490, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 502
variable_pause_resume_travel_speed: 100
variable_load_filament_extruder_temp: 220
gcode:

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0 
    M107

[gcode_macro M109]
rename_existing: M99109
gcode:    
    {% set s = params.S|float %}    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-1} MAXIMUM={s+1}   
    {% endif %}
    
[gcode_macro M190]
rename_existing: M99190
gcode:    
    {% set s = params.S|float %}
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+1}  
    {% endif %}

[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
      RESPOND TYPE=echo MSG="No operations in 10min!"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    G91 
    G1 E45 F300
    G1 E30 F150
    G90

[gcode_macro UNLOAD_FILAMENT]
gcode:
    G91
    G1 E15 F300
    G1 E-10 F1500
    G4 P4000
    G1 E-60 F300
    G90 

[gcode_macro EXTRUDER_HOT]
gcode:
    {% set current_target_temp  = printer.extruder.target|int %}
    {% set current_temp  = printer.extruder.temperature|int %}
    {% set extrude_move_temp = 190 %}

    {% if current_temp <= extrude_move_temp - 2 %}
        RESPOND TYPE=echo MSG="The extrude needs to reach 190â„ƒ, please wait..."
        M109 S{extrude_move_temp}
    {% endif %}

[gcode_macro LED_ON]
gcode:
    SET_PIN PIN=my_led VALUE=1

[gcode_macro LED_OFF]
gcode:
    SET_PIN PIN=my_led VALUE=0
	
[gcode_macro M205]
gcode:
    M105

[gcode_macro PROBE_CALIBRATE]
rename_existing:PROBE_CALIBRATE_BASE
gcode:
    BED_PLATE_HEATED_WAIT
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}
    PROBE_CALIBRATE_BASE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
    {action_respond_info("Check Heating!")}
    BED_PLATE_HEATED_WAIT

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    BED_MESH_CLEAR
    
    BED_MESH_CALIBRATE_BASE ADAPTIVE=1

    {% if current_target_temp == 0 %}
        M140 S0  
    {% endif %}


[gcode_macro START_PRINT]
description: 
variable_state: 'Prepare'
variable_record_extruder_temp:0
variable_max_record_extruder_temp:0
gcode:
    {% set mesh_name = "default" %}
    {% set extruder_target_temp = printer.extruder.target|int %}

    M400

    CLEAR_PAUSE

    G90
    {% if state == 'Prepare' %}

        {% if printer.toolhead.homed_axes|lower != "xyz" %}
            G28
        {% endif %}

        M104 S{extruder_target_temp}

        BED_PLATE_HEATED_WAIT

        {% if printer.extruder.temperature < extruder_target_temp %}
            M109 S{extruder_target_temp} 
        {% endif %}

        BED_MESH_CALIBRATE ADAPTIVE=1

    {% endif %}

    

[gcode_macro END_PRINT]
description: 
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

    G91
    {% if printer['filament_switch_sensor filament_sensor'].enable == True and
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-2 F2700
            G1 E-2 Z0.2 F2400
        {% endif %}
    {% endif %}

    {% if (printer.gcode_move.position.z + 10) < z_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y360 F9000

    TURN_OFF_HEATERS

    M84 X Y Z E  

    M220 S100
    M221 S100

    CLEAR_PAUSE

    {action_respond_info("Finish Print!")}

[gcode_macro CANCEL_PRINT]
description: 
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set x_park = printer['gcode_macro _global_var'].cancel_park.x|float %}
    {% set y_park = printer['gcode_macro _global_var'].cancel_park.y|float %}
    {% set z_park = printer['gcode_macro _global_var'].cancel_park.z|float %}
    {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    CANCEL_PRINT_BASE

    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == True and 
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-{e_restract} F500
        {% else %}
            {action_respond_info("Nozzle not hot enough")}
        {% endif %}
    {% endif %}

    {%if (printer.gcode_move.position.z + 10) < z_lift_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
    {% endif %}
        G90
        G1 X{x_park} Y{y_park} F9000

    TURN_OFF_HEATERS
    _ALL_FAN_OFF

    CLEAR_PAUSE
    M84 X Y Z E

    {action_respond_info("Cancel Print Success!")}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0


[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
    {% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    
    {action_respond_info("Pause Print!")}
    
    PAUSE_BASE
    G91
    {% if (printer.gcode_move.position.z + 5) < z_lift_max %}
        G1 Z+5 F3000
    {% else %}
        G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    {% if printer.gcode_move.position.x != x_park and
            printer.gcode_move.position.y != y_park     
    %}
        G1 X{x_park} Y{y_park} F{printer["gcode_macro _global_var"].pause_resume_travel_speed * 60}
    {% endif %}

    M104 S{printer.extruder.target}
 
    {% if state == 'normal' %}
        {% if printer.extruder.temperature < printer.extruder.target %}
            G91
            G1 E-{e_restract} F300
            G90
        {% endif %}
    {% elif state == 'filament_change' %}
        {% if printer.extruder.temperature < printer.extruder.target %}
            G91
            G1 E-30 F300
            G90
        {% endif %}
    {% endif %}


[delayed_gcode _resume_wait]
gcode:
    {% if printer['gcode_macro RESUME'].execute|lower != 'false' %}
        RESUME
    {% endif %}


[gcode_macro RESUME]
description: Pause the actual running print
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}

    {% set extruder_target_temp = printer.extruder.target|int %}
    {% set max_extruder_target_temp = (extruder_target_temp + 2) %}


    {% if params.STATE == 'filament_change' %}
        {% if printer["filament_switch_sensor filament_sensor"].enable != True and
              printer["filament_switch_sensor filament_sensor"].filament_detected != True
        %}
            {action_respond_info("Please Insert filament in Sensor!")}
        {% else %}
            {% if printer.extruder.temperature < printer.extruder.target %}
                {action_respond_info("Extruder not hot enough!")}
                {action_respond_info("Heating now!")}
                M109 S{extruder_target_temp}
                G91
                G1 E30 F300
                G1 E10 F150
                G90
            {% else %}
                G91
                G1 E30 F300
                G1 E10 F150
                G90
            {% endif %}

            {action_respond_info("Print resumming!")}
            RESUME_BASE
        {% endif %}
    {% elif state == 'normal' %}
        {% if printer['filament_switch_sensor filament_sensor'].enable != True and
              printer['filament_switch_sensor filament_sensor'].filament_detected != True
        %}
            {action_respond_info("Please Insert filament in Sensor!")}
        {% else %}
            {action_respond_info("Print resumming!")}
            G91
            G1 E{e_restract} F300
            G90
            RESUME_BASE
        {% endif %}
    {% endif %}

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
    BED_MESH_PROFILE LOAD=default

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("Prepare->Heating!")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("Heating->Start!")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}

[gcode_macro PRINT_START]      
gcode:
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True
    
[gcode_macro PRINT_END]
gcode:
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    RUN_SHELL_COMMAND CMD=clear_plr
    clear_last_file